#!/bin/bash -
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e

argv0=dnscrypt-autoinstall
dnscryptinst=0
lsodiuminst=0
dnscryptconf=0
cachedir="/var/cache/$argv0"

msg() {
    printf '%s\n' "$@"
}

err() {
    printf '%s\n' "$@" >&2
}

release_parse() {
    awk -F '</?a( href=\".+\">)?' -v name="^$1-[0-9.]+\.tar\.gz$" '$2 ~ name {print $2}'
}

release_latest() {
    curl -sSL --retry 5 "$2" | release_parse "$1" | sort -V | tail -1
}

build_release() {
    declare -rx user_build="$1" startdir="$2"
    declare -fx release_parse release_latest

    su dnscrypt-build <<'EOF'
set -e
umask 0022

case "$user_build" in
    libsodium)
	build_url='https://download.libsodium.org/libsodium/releases'
	build_tgz=$(release_latest libsodium "$build_url")
	srcdir="$startdir"/libsodium-src
	pkgdir="$startdir"/libsodium-pkg
	gpgdir="$startdir"/gnupg
	;;
    dnscrypt-proxy)
	build_url='https://download.dnscrypt.org/dnscrypt-proxy'
	build_tgz=$(release_latest dnscrypt-proxy "$build_url")
	srcdir="$startdir"/dnscrypt-src
	pkgdir="$startdir"/dnscrypt-pkg
	gpgdir="$startdir"/gnupg
	;;
    *)
        exit 1
        ;;
esac

mkdir -p "$srcdir"
cd "$srcdir"
curl --retry 5 -LO "$build_url/$build_tgz"
curl --retry 5 -LO "$build_url/$build_tgz".sig

mkdir -p "$gpgdir"
chmod -c 700 "$gpgdir"
gpg --homedir="$gpgdir" --keyserver keys.gnupg.net --verbose --recv-keys 54A2B8892CC3D6A597B92B6C210627AABA709FE1
gpg --homedir="$gpgdir" --keyserver keys.gnupg.net --verbose --verify "$build_tgz".sig

tar -xzvf "$build_tgz" --strip-components=1

case "$user_build" in
    libsodium)
	./configure --enable-minimal
	make
	make check
	;;
    dnscrypt-proxy)
	./configure
	make
	;;
esac

mkdir -p "$pkgdir"
fakeroot -- make DESTDIR="$pkgdir" install

if [[ $user_build == dnscrypt-proxy ]]; then
    init_url='https://raw.githubusercontent.com/simonclausen/dnscrypt-autoinstall/master/systemd/'
    init_path="$pkgdir"/etc/systemd/system

    curl --retry 5 --create-dirs -L "$init_url"/dnscrypt-proxy.service -o "$init_path"/dnscrypt-proxy.service
    curl --retry 5 --create-dirs -L "$init_url"/dnscrypt-proxy-backup.service -o "$init_path"/dnscrypt-proxy-backup.service
    curl --retry 5 --create-dirs -L "$init_url"/dnscrypt-proxy.conf -o "$init_path"/dnscrypt-proxy.conf
fi

cd "$pkgdir"
fakeroot -- env LANG=C tar -cf - ./* | gzip -c - > "$startdir/package-$build_tgz"

printf '%s\n' "package-$build_tgz" > "$startdir/latest"
exit 0

EOF
    if (($?)); then
	err "Build of $1 failed."
	exit 1
    fi
}

install_depends() {
    if [[ -f /etc/debian_version ]]; then
	apt-get update
	apt-get install -y automake bsdtar libtool build-essential ca-certificates curl
    elif [[ -f /etc/fedora-release ]]; then
	dnf update
	dnf install -y make automake gcc gcc-c++ libtool ca-certificates curl nc libsodium-devel
    elif [[ -f /etc/redhat-release ]]; then
	yum update
	yum install -y make automake gcc gcc-c++ libtool ca-certificates curl nc
    elif [[ -f /etc/SuSE-release ]]; then
	zypper ref
	zypper in -y automake gcc gcc-c++ libtool libsodium18 libsodium-devel
    else
	err 'No supported distribution found'
	exit 1
    fi
}

get_location() {
    # util-linux whereis always returns 0
    # XXX: Check version of present libraries
    whereis "$1" | awk '{print $2}'
}

config_interface() {
    local resolver_url=https://raw.githubusercontent.com/jedisct1/dnscrypt-proxy/master
    local resolver_list=/usr/local/share/dnscrypt-proxy/dnscrypt-resolvers.csv

    # Fall back to locally installed .csv
    # XXX: function removed
    if fetch_and_verify "$resolver_url/dnscrypt-resolvers.csv"; then
	resolver_list=./dnscrypt-resolvers.csv
    fi

    cat <<EOF

Which DNSCrypt service would you like to use?

EOF
    local IFS=$'\n'
    select description in $(awk -F, '!/^Name/ {printf "%-30s(%s)\n", $1, $2}' "$resolver_list"); do
	awk '{print $1}' <<< "$description"
	break
    done
}

config_resolv() {
    resolv_conf=$(realpath -e /etc/resolv.conf)
    local resolv_conf

    chattr -V -i "$resolv_conf"
    tee "$resolv_conf" >/dev/null <<EOF
nameserver 127.0.0.1
nameserver 127.0.0.2
EOF
    chattr -V +i "$resolv_conf"
}

if ((UID)); then
    err 'This script should be run as root.'
    exit 1
fi

if [[ $(get_location dnscrypt-proxy) ]]; then
    dnscryptinst=1
fi

if [[ $(get_location libsodium) ]]; then
    lsodiuminst=1
fi

if [[ -e /etc/systemd/system/$argv0.service ]]; then
    dnscryptconf=1
fi

if ((dnscryptinst && dnscryptconf)); then
    cat <<EOF

Welcome to the dnscrypt-autoinstall script.

It seems like DNSCrypt was installed and configured by this script.

What would you like to do?

1) Configure another DNSCrypt service or turn off DNSCrypt.
2) Uninstall DNSCrypt and remove the auto-startup configuration.
3) Exit.

EOF
    read -r -p 'Select an option [1-3]: '

    case "$REPLY" in
	1)
	    config_interface
	    msg 'Reconfiguration done. Quitting.'
	    exit ;;
	2)
	    config_del # TODO
	    msg 'DNSCrypt has been removed. Quitting.'
	    exit ;;
	3)
	    msg 'Bye!'
	    exit ;;
    esac
elif ((dnscryptinst)); then
    cat <<EOF    

Error!
    
It seems like DNSCrypt is already installed but
not configured by this script.
    
Remove DNSCrypt and it's configuration completely
from the system and run this script again.
    
To uninstall DNSCrypt, try running this script
again with the 'forcedel' argument. For example:
    ./dnscrypt-autoinstall.sh forcedel
    
Quitting.
EOF
    exit 1
elif nc -z -w1 127.0.0.1 53; then
    cat <<EOF
Error!
    
It looks like there is already a DNS server
or forwarder installed and listening on 127.0.0.1.

To use DNSCrypt, you need to either uninstall it
or make it listen on another IP than 127.0.0.1.

To uninstall DNSCrypt, try running this script
again with the 'forcedel' argument. For example:
    ./dnscrypt-autoinstall.sh forcedel

Quitting.
EOF
    exit 1
else
    cat <<EOF

Welcome to the dnscrypt-autoinstall script.

This will install DNSCrypt and autoconfigure it to run as a daemon at start up.

EOF
    read -n1 -r -p "Press any key to continue..."
    clear
    cat <<EOF

Would you like to see a list of supported providers?
EOF
    read -r -p "(DNSCrypt.eu is default) [y/n]: "
    if [[ $REPLY == y ]]; then
	config_interface
    fi

    if ! getent passwd dnscrypt-build; then
	useradd --system dnscrypt-build -c "$argv0 build user" -s /bin/bash
	passwd -q -l dnscrypt-build
    fi

    install -d "$cachedir"
    install -d "$cachedir"/build -o dnscrypt-build -g dnscrypt-build -m 700
    install_depends

    if [[ $(get_location libsodium) ]]; then
	build_release libsodium "$cachedir"/build
	read -r package < "$cachedir"/build/latest
	tar --no-overwrite-dir -xvf "$cachedir/build/$package" -C /
	ldconfig
    fi

    build_release dnscrypt-proxy "$cachedir"/build
    read -r package < "$cachedir"/build/latest    
    tar --no-overwrite-dir -xvf "$cachedir/build/$package" -C /

    useradd --system -d /var/lib/dnscrypt -s /bin/nologin dnscrypt
    install -g dnscrypt -o dnscrypt -m 700 -d /var/lib/dnscrypt

    # cp -p /etc/resolv.conf /etc/resolv.conf-dnscryptbak
    cat <<EOF

DNSCrypt is now installed.
You can run this script again to reconfigure, turn off, or uninstall it.
EOF
fi
