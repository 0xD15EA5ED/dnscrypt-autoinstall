#!/bin/bash -
PATH=/usr/local/bin:/usr/bin
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e

argv0=dnscrypt-autoinstall
dnscryptinst=0
libsodiuminst=0
dnscryptconf=0
whichresolver=dnscrypteu
cachedir="/var/cache/$argv0"

msg() {
    printf '%s\n' "$@"
}

err() {
    printf '%s\n' "$@" >&2
}

build_release() {
    # XXX: export functions
    case "$1" in
	libsodium)
	    readonly _build_dir="$2"
	    readonly _build_libsodium=1 ;;
	dnscrypt)
	    readonly _build_dir="$2"
	    readonly _build_dnscrypt=1 ;;
	*)
	    err 'Invalid build type'
	    exit 1 ;;
    esac

    su dnscrypt-build <<'EOF'
set -e
umask 0022

release_parse() {
    awk -F '</?a( href=\".+\">)?' -v name="^$1-[0-9.]+\.tar\.gz$" '$2 ~ name {print $2}'
}

release_latest() {
    curl -sSL --retry 5 "$2" | release_parse "$1" | sort -V | tail -1
}

if ((_build_libsodium)); then
    build_url='https://download.libsodium.org/libsodium/releases'
    build_tgz=$(release_latest libsodium "$build_url")
    srcdir="$_build_dir"/libsodium-src
    pkgdir="$_build_dir"/libsodium-pkg
    gpgdir="$_build_dir"/gnupg
elif ((_build_dnscrypt)); then
    build_url='https://download.dnscrypt.org/dnscrypt-proxy'
    build_tgz=$(release_latest dnscrypt-proxy "$build_url")
    srcdir="$_build_dir"/dnscrypt-src
    pkgdir="$_build_dir"/dnscrypt-pkg
    gpgdir="$_build_dir"/gnupg
fi

mkdir -p "$srcdir"
cd "$srcdir"
curl --retry 5 -LO "$build_url/$build_tgz"
curl --retry 5 -LO "$build_url/$build_tgz".sig

mkdir -p "$gpgdir"
gpg --homedir="$gpgdir" --verbose --recv-keys 54A2B8892CC3D6A597B92B6C210627AABA709FE1
gpg --homedir="$gpgdir" --verbose --verify "$build_tgz".sig

tar -xzvf "$build_tgz" --strip-components=1

if ((_build_libsodium)); then
    ./configure --enable-minimal
    make
    make check
elif ((_build_dnscrypt)); then
    ./configure
    make
fi

mkdir -p "$pkgdir"
fakeroot -- make DESTDIR="$pkgdir" install

cd "$pkgdir"
fakeroot -- env LANG=C tar -cf - ./* | gz -c - > "$_build_dir/package-$build_tgz"

printf '%s' "package-$build_tgz" > "$_build_dir/latest"
exit 0

EOF
    if (($?)); then
	err "Build of $1 failed."
	exit 1
    fi
}


install_depends() {
    if [[ -f /etc/debian_version ]]; then
	apt-get update
	apt-get install -y automake bsdtar libtool build-essential ca-certificates curl
    elif [[ -f /etc/fedora-release ]]; then
	dnf update
	dnf install -y make automake gcc gcc-c++ libtool ca-certificates curl nc libsodium-devel
    elif [[ -f /etc/redhat-release ]]; then
	yum update
	yum install -y make automake gcc gcc-c++ libtool ca-certificates curl nc
    elif [[ -f /etc/SuSE-release ]]; then
	zypper ref
	zypper in -y automake gcc gcc-c++ libtool libsodium18 libsodium-devel
    else
	err 'No supported distribution found'
	exit 1
    fi
}

get_location() {
    # util-linux whereis always returns 0
    whereis "$1" | awk '{print $2}'
}

config_interface() {
    local resolver_url=https://raw.githubusercontent.com/jedisct1/dnscrypt-proxy/master
    local resolver_list=/usr/local/share/dnscrypt-proxy/dnscrypt-resolvers.csv

    # Fall back to locally installed .csv
    # XXX: function removed
    if fetch_and_verify "$resolver_url/dnscrypt-resolvers.csv"; then
	resolver_list=./dnscrypt-resolvers.csv
    fi

    cat <<EOF

Which DNSCrypt service would you like to use?

EOF
    local IFS=$'\n'
    select description in $(awk -F, '!/^Name/ {printf "%-30s(%s)\n", $1, $2}' "$resolver_list"); do
	awk '{print $1}' <<< "$description"
	break
    done
}

config_resolv() {
    resolv_conf=$(realpath -e /etc/resolv.conf)
    local resolv_conf

    chattr -V -i "$resolv_conf"
    tee "$resolv_conf" >/dev/null <<EOF
nameserver 127.0.0.1
nameserver 127.0.0.2
EOF
    chattr -V +i "$resolv_conf"
}

if ((UID)); then
    err 'This script should be run as root.'
    exit 1
fi

if [[ $(get_location dnscrypt-proxy) ]]; then
    dnscryptinst=1
fi

if [[ $(get_location libsodium) ]]; then
    lsodiuminst=1
fi

if [[ -e /etc/systemd/system/$argv0.service ]]; then
    dnscryptconf=1
fi

if ((dnscryptinst && dnscryptconf)); then
    cat <<EOF

Welcome to the dnscrypt-autoinstall script.

It seems like DNSCrypt was installed and configured by this script.

What would you like to do?

1) Configure another DNSCrypt service or turn off DNSCrypt.
2) Uninstall DNSCrypt and remove the auto-startup configuration.
3) Exit.

EOF
    read -p 'Select an option [1-3]: '

    case "$REPLY" in
	1)
	    config_interface
	    config_do  # TODO
	    msg 'Reconfiguration done. Quitting.'
	    exit ;;
	2)
	    config_del # TODO
	    msg 'DNSCrypt has been removed. Quitting.'
	    exit ;;
	3)
	    msg 'Bye!'
	    exit ;;
    esac
elif ((dnscryptinst)); then
    exit 1 # TODO
elif nc -z -w1 127.0.0.1 53; then
    exit 1 # TODO
else
    exit 0 # TODO
fi

if ! getent passwd dnscrypt-build; then
    useradd --system dnscrypt-build -c "$argv0 build user" -s /bin/bash
    passwd -q -l dnscrypt-build
fi

install -d "$cachedir"
install -d "$cachedir"/build -o dnscrypt-build -g dnscrypt-build -m 700
install_depends

if ((!lsodiuminst)); then
    build_release libsodium "$cachedir"/build
    read -r pkgver < "$cachedir"/build/latest

    tar --no-overwrite-dir -xvf "$cachedir/$pkgver" -C /
    ldconfig
fi

if ((!dnscryptinst)); then
    build_release dnscrypt-proxy "$cachedir"/build
    read -r pkgver < "$cachedir"/build/latest

    tar --no-overwrite-dir -xvf "$cachedir/$pkgver" -C /
    useradd --system -d /var/lib/dnscrypt -s /bin/nologin dnscrypt
    install -g dnscrypt -o dnscrypt -m 700 -d /var/lib/dnscrypt
fi
