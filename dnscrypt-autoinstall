#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e

argv0=dnscrypt-autoinstall
dnscryptinst=0
libsodiuminst=0
dnscryptconf=0
whichresolver=dnscrypteu
cachedir="/var/cache/$argv0"
startdir="$PWD"

# Set TMPDIR if /tmp is mounted noexec
tmp=$(mktemp -d "$argv0".XXXXXXXX)

msg() {
    printf '%s\n' "$@"
}

err() {
    printf '%s\n' "$@" >&2
}

release_parse() {
    awk -F '</?a( href=\".+\">)?' -v name="^$1-[0-9.]+\.tar\.gz$" '$2 ~ name {print $2}'
}

release_latest() {
    curl -sSL --retry 5 "$2" | release_parse "$1" | sort -V | tail -1
}

import_gpgkey() {
    msg "Importing key with ID: $1"
    gpg --verbose --recv-keys "$1"
}

verify_sig() {
    msg "Verifying signature of: ${1%%.sig}"
    gpg --verbose --verify "$1"
}

fetch_and_verify() {
    curl --retry 5 -LO "$1"
    curl --retry 5 -LO "$1".sig

    import_gpgkey 54A2B8892CC3D6A597B92B6C210627AABA709FE1
    verify_sig "${1##*/}".sig
}

install_depends() {
    if [[ -f /etc/debian_version ]]; then
	sudo apt-get update
	sudo apt-get install -y automake bsdtar libtool build-essential ca-certificates curl
    elif [[ -f /etc/fedora-release ]]; then
	sudo dnf update
	sudo dnf install -y make automake gcc gcc-c++ libtool ca-certificates curl nc libsodium-devel
    elif [[ -f /etc/redhat-release ]]; then
	sudo yum update
	sudo yum install -y make automake gcc gcc-c++ libtool ca-certificates curl nc
    elif [[ -f /etc/SuSE-release ]]; then
	sudo zypper ref
	sudo zypper in -y automake gcc gcc-c++ libtool libsodium18 libsodium-devel
    else
	err 'No supported distribution found'
	exit 1
    fi
}

make_libsodium() {
    ./configure --enable-minimal
    make
    make check
}

make_dnscrypt() {
    ./configure
    make
}

build_release() {
    #global startdir build_ver
    local build build_url startdir srcdir pkgdir build_libsodium=0 build_dnscrypt=0

    case "$1" in
	libsodium)
	    build_libsodium=1
	    build_url='https://download.libsodium.org/libsodium/releases'
	    build_ver=$(release_latest libsodium "$build_url")
	    srcdir="$startdir"/libsodium-src
	    pkgdir="$startdir"/libsodium-pkg
	    ;;
	dnscrypt)
	    build_dnscrypt=1
	    build_url='https://download.dnscrypt.org/dnscrypt-proxy'
	    build_ver=$(release_latest dnscrypt-proxy "$build_url")
	    srcdir="$startdir"/dnscrypt-src
	    pkgdir="$startdir"/dnscrypt-pkg
	    ;;
	*)
	    err 'No valid build selected'
	    exit 1 ;;
    esac

    cd "$srcdir"
    fetch_and_verify "$build_url/$build_ver"
    tar -xzvf "$build_ver" --strip-components=1

    if ((build_libsodium)); then
	make_libsodium
    elif ((build_dnscrypt)); then
	make_dnscrypt
    else
	exit 1
    fi

    mkdir -p "$pkgdir"
    fakeroot -- make DESTDIR="$pkgdir" install

    cd "$pkgdir"
    fakeroot -- env LANG=C tar -cf - ./* | xz -c -z - > "$startdir/package-$build_ver"
}

get_location() {
    # util-linux whereis always returns 0
    whereis "$1" | awk '{print $2}'
}

config_interface() {
    #global whichresolver
    local resolver_url=https://raw.githubusercontent.com/jedisct1/dnscrypt-proxy/master

    # Fall back to locally installed .csv
    if fetch_and_verify "$resolver_url/dnscrypt-resolvers.csv"; then
	resolver_list=./dnscrypt-resolvers.csv
    else
	resolver_list=/usr/local/share/dnscrypt-proxy/dnscrypt-resolvers.csv
    fi

    # Match line numbers to Github preview
    cat <<EOF

Which DNSCrypt service would you like to use?

EOF
    select whichresolver in $(awk -F',' '{print $1}') "$resolver_list"; do
	if [[ $provider != Name ]]; then
	    break
	fi
    done
}

config_resolv() {
    resolv_conf=$(realpath -e /etc/resolv.conf)
    local resolv_conf

    sudo chattr -V -i "$resolv_conf"
    sudo tee "$resolv_conf" >/dev/null <<EOF
nameserver 127.0.0.1
nameserver 127.0.0.2
EOF
    sudo chattr -V +i "$resolv_conf"
}

check_existing_dns() {
    nc -z -w1 127.0.0.1 53
}

trap 'rm -rf "$tmp"' EXIT

if ((!UID)); then
    err 'This script should not be run as root.'
    exit 1
fi

if ! sudo -v; then
    err 'Please configure sudo before using this script.'
    exit 1
fi

if [[ $(get_location dnscrypt-proxy) ]]; then
    dnscryptinst=1
fi

if [[ $(get_location libsodium) ]]; then
    lsodiuminst=1
fi

if [[ -e /etc/systemd/system/$argv0.service ]]; then
    dnscryptconf=1
fi

if ((dnscryptinst && dnscryptconf)); then
    cat <<EOF

Welcome to the dnscrypt-autoinstall script.

It seems like DNSCrypt was installed and configured by this script.

What would you like to do?

1) Configure another DNSCrypt service or turn off DNSCrypt.
2) Uninstall DNSCrypt and remove the auto-startup configuration.
3) Exit.

EOF
    read -p 'Select an option [1-3]: '

    case "$REPLY" in
	1)
	    config_interface
	    config_do  # TODO
	    msg 'Reconfiguration done. Quitting.'
	    exit ;;
	2)
	    config_del # TODO
	    msg 'DNSCrypt has been removed. Quitting.'
	    exit ;;
	3)
	    msg 'Bye!'
	    exit ;;
    esac
elif ((dnscryptinst)); then
    exit 1 # TODO
elif check_existing_dns; then
    exit 1 # TODO
else
    exit 0 # TODO
fi

umask 0022
sudo mkdir -p "$cachedir"
cd "$tmp"

if ((!lsodiuminst)); then
    build_release libsodium
    sudo mv "package-$build_ver" "$cachedir/"
    sudo tar --no-overwrite-dir -xvf "$cachedir/package-$build_ver" -C /
    sudo ldconfig
fi

if ((!dnscryptinst)); then
    build_release dnscrypt-proxy
    sudo mv "package-$build_ver" "$cachedir/"
    sudo tar --no-overwrite-dir -xvf "$cachedir/package-$build_ver" -C /
    sudo useradd --system -d /var/lib/dnscrypt -s /bin/nologin dnscrypt
    sudo install -g dnscrypt -o dnscrypt -m 700 -d /var/lib/dnscrypt
fi
